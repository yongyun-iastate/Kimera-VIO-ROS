<!-- General Kimera-VIO-ROS launch file. Change arguments in your own launch
file and include this one to launch KimeraVIO on the dataset of your choice -->
<launch>
  <!-- Unique integer id of this robot. -->
  <arg name="robot_id" default="0"/>
  <!-- Whether or not there are other robots being run -->
  <arg name="multirobot" default="false"/>
  <!-- Dataset name (used to load params) -->
  <arg name="dataset_name" default=""/>
  <!-- If False, parses the given rosbag, otw it plays the rosbage -->
  <arg name="online" default="true" />
  <!-- !!!! VIT !!!! This should be true when running online with a rosbag publishing clock,
  but false when parsing rosbag? Needs rosbag to be publishing clock -->
  <arg name="should_use_sim_time" default="true"/>
  <param name="use_sim_time" value="$(arg should_use_sim_time)"/>
  <arg name="rosbag_path" unless="$(arg online)"/>

  <arg name="rgb_image_transport" default="raw"/>
  <!-- BoW vector publishing for Kimera-Multi -->
  <arg name="bow_batch_size" default="1" />
  <arg name="bow_skip_num"   default="1" />
  <arg name="publish_vlc_frames"       default="true"/>

  <!-- If true, KimeraVIO will log output of all modules to the
       'log_output_path' location. -->
  <arg name="log_output" default="false"/>
  <arg name="log_output_path"
       default="$(find kimera_vio_ros)/output_logs/"/>
  <!-- If true, log ground-truth poses to a csv file using the
       Logger utils (if online is true) or rosbag (if online is false),
       and processing data from the gt_topic rostopic -->
  <arg name="log_gt_data" default="false"/>
  <arg name="gt_topic"    default=""/>

  <!-- If true, KimeraVIO will enable the LoopClosureDetector module. -->
  <arg name="use_lcd" default="false"/>
  <!-- If true, KimeraVIO will disable PGO for the LoopClosureDetector module. -->
  <arg name="lcd_no_optimize" default="false"/>
  <!-- If true, KimeraVIO will not call detection LoopClosureDetector module. -->
  <arg name="lcd_no_detection" default="false"/>

  <arg name="use_external_odom" default="false"/>
  <!-- If true, KimeraVIO will compute a static offset between the
       latest IMU and camera measurement -->
  <arg name="do_coarse_temporal_sync" default="false"/>
  <!-- If true, KimeraVIO will estimate the time delay between the
       IMU and camera -->
  <arg name="do_fine_temporal_sync" default="false"/>

  <!-- Parameters -->
  <!-- each dataset has its own set of parameter files -->
  <!-- the parameters are set in param folder, ordered by the dataset's name -->
  <arg name="params_folder" default="$(find kimera_vio)/params/$(arg dataset_name)"/>

  <!-- you can optionally specify an alternative location -->
  <arg name="sensor_folder" default=""/>

  <!-- the rgbd pipeline allows for a mask for depth images -->
  <arg name="depth_image_mask" default=""/>

  <!-- disable to force strict timestamp checks on the input images -->
  <arg name="force_same_image_timestamp" default="true"/>

  <!-- diable stereo depth checks for LCD feature matching -->
  <arg name="lcd_disable_stereo_match_depth_check" default="false"/>

  <!-- diable backend using incremental pose -->
  <arg name="no_incremental_pose" default="false"/>

  <!-- Specify the absolute path to the vocabulary file. -->
  <!-- This is usually in the VIO directory (VIO/vocabulary/ORBvoc.yml). -->
  <arg name="path_to_vocab" default="$(find kimera_vio)/vocabulary/ORBvoc.yml"/>

  <!-- Subscribed Topics -->
  <arg name="left_cam_topic"                    default="/cam0/image_raw"/>
  <arg name="right_cam_topic"                   default="/cam1/image_raw"/>
  <arg name="depth_cam_topic"                   default=""/>
  <arg name="imu_topic"                         default="/imu0"/>
  <!-- Empty string ("") means no ground-truth available. Used for init if
   requested to do ground-truth initialization. -->
  <arg name="external_odom_topic"               default=""/>

  <!-- Frame IDs -->
  <arg name="odom_frame_id"      default="odom"/>
  <arg name="base_link_frame_id" default="base_link"/>
  <arg name="map_frame_id"       default="map"/>
  <arg name="left_cam_frame_id"  default="left_cam"/>
  <arg name="right_cam_frame_id" default="right_cam"/>

  <!-- General parameters -->
  <arg name="verbosity"    default="0"/>
  <arg name="minloglevel"  default="0"/>
  <!-- Publish pipeline output to ROS. -->
  <!-- Note that this is duplicated from the flags file -->
  <arg name="visualize"    default="true" />
  <!-- Type of visualization: 0: 2d3d_mesh, 1: pointcloud, 2: none -->
  <arg name="viz_type"     default="0" />
  <!-- Use Rviz for visualization or OpenCV -->
  <arg name="use_rviz"     default="true"/>

  <!-- Only here for convenience -->
  <arg name="run_stereo_dense"     default="false"/>

  <arg name="close_on_error" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="launch_prefix" value="" unless="$(arg debug)"/>
  <arg name="launch_prefix" value="gdb -ex run --args" if="$(arg debug)"/>

  <arg name="flags_folder" default="$(arg params_folder)/flags"/>
  <arg name="include_pipeline_flags" default="false"/>
  <arg name="pipeline_flag_args" value="--flagfile=$(arg flags_folder)/Pipeline.flags"
       if="$(arg include_pipeline_flags)"/>
  <arg name="pipeline_flag_args" value=""
       unless="$(arg include_pipeline_flags)"/>

  <arg name="glog_dir" default=""/>
  <arg name="glog_to_dir" default="false"/>
  <arg name="glog_args" value="--logtostderr=0 --log_dir=$(arg glog_dir)" if="$(arg glog_to_dir)"/>
  <arg name="glog_args" value="--logtostderr=1" unless="$(arg glog_to_dir)"/>

  <!-- Launch main node  -->
  <node name="kimera_vio_ros_node" pkg="kimera_vio_ros" type="kimera_vio_ros_node"
        output="screen" ns="kimera_vio_ros"
        launch-prefix="$(arg launch_prefix)"
        required="$(arg close_on_error)"
        args="--use_lcd=$(arg use_lcd)
              --vocabulary_path=$(arg path_to_vocab)
              $(arg pipeline_flag_args)
              --flagfile=$(arg flags_folder)/Mesher.flags
              --flagfile=$(arg flags_folder)/VioBackend.flags
              --flagfile=$(arg flags_folder)/RegularVioBackend.flags
              --flagfile=$(arg flags_folder)/Visualizer3D.flags
              --use_external_odometry=$(arg use_external_odom)
              --do_coarse_imu_camera_temporal_sync=$(arg do_coarse_temporal_sync)
              --do_fine_imu_camera_temporal_sync=$(arg do_fine_temporal_sync)
              --lcd_no_optimize=$(arg lcd_no_optimize)
              --lcd_no_detection=$(arg lcd_no_detection)
              --depth_image_mask=$(arg depth_image_mask)
              $(arg glog_args)
              --colorlogtostderr=1
              --log_prefix=1
              --minloglevel=$(arg minloglevel)
              --v=$(arg verbosity)
              --log_output=$(arg log_output)
              --log_euroc_gt_data=$(arg log_output)
              --output_path=$(arg log_output_path)
              --lcd_disable_stereo_match_depth_check=$(arg lcd_disable_stereo_match_depth_check)
              --no_incremental_pose=$(arg no_incremental_pose)
              --viz_type=$(arg viz_type)
              --visualize=$(arg visualize)">
    <param name="image_transport" value="$(arg rgb_image_transport)"/>
    <param name="params_folder_path"    value="$(arg params_folder)"/>
    <param name="sensor_params_folder_path" value="$(arg sensor_folder)"/>

    <param name="online_run"            value="$(arg online)"/>
    <param name="use_lcd"               value="$(arg use_lcd)"/>
    <param name="robot_id"              value="$(arg robot_id)"/>
    <param name="use_external_odom"     value="$(arg use_external_odom)"/>
    <param name="force_same_image_timestamp" value="$(arg force_same_image_timestamp)"/>
    <!-- BoW publishing for Kimera-Multi -->
    <param name="bow_batch_size"        value="$(arg bow_batch_size)" />
    <param name="bow_skip_num"          value="$(arg bow_skip_num)" />
    <param name="publish_vlc_frames"    value="$(arg publish_vlc_frames)" />

    <!-- Frame IDs for Odometry -->
    <param name="odom_frame_id"      value="$(arg odom_frame_id)"/>
    <param name="base_link_frame_id" value="$(arg base_link_frame_id)"/>
    <param name="map_frame_id"       value="$(arg map_frame_id)"/>
    <param name="left_cam_frame_id"  value="$(arg left_cam_frame_id)"/>
    <param name="right_cam_frame_id" value="$(arg right_cam_frame_id)"/>

    <!-- Subscriber topics -->
    <!-- if we run online, use remap -->
    <remap from="left_cam/image_raw"  to="$(arg left_cam_topic)"      if="$(arg online)"/>
    <remap from="left_cam/image_raw/compressed"  to="$(arg left_cam_topic)/compressed"      if="$(arg online)"/>

    <remap from="right_cam/image_raw" to="$(arg right_cam_topic)"
           if="$(eval arg('online') and arg('right_cam_topic') != '')"/>

       <remap from="right_cam/image_raw/compressed" to="$(arg right_cam_topic)/compressed"
           if="$(eval arg('online') and arg('right_cam_topic') != '')"/>

    <remap from="depth_cam/image_raw" to="$(arg depth_cam_topic)"
           if="$(eval arg('online') and arg('depth_cam_topic') != '')"/>
    <remap from="imu"                 to="$(arg imu_topic)"           if="$(arg online)"/>
    <remap from="external_odom"       to="$(arg external_odom_topic)"
           if="$(eval arg('online') and arg('external_odom_topic') != '')"/>
    <remap from="gt_odom"             to="$(arg gt_topic)"
           if="$(eval arg('online') and arg('gt_topic') != '')"/>

    <!-- if we run offline, use params -->
    <param name="rosbag_path"            value="$(arg rosbag_path)"     unless="$(arg online)"/>
    <param name="left_cam_rosbag_topic"  value="$(arg left_cam_topic)"  unless="$(arg online)"/>
    <param name="right_cam_rosbag_topic" value="$(arg right_cam_topic)" unless="$(arg online)"/>
    <param name="depth_cam_rosbag_topic" value="$(arg depth_cam_topic)" unless="$(arg online)"/>
    <param name="imu_rosbag_topic"       value="$(arg imu_topic)"       unless="$(arg online)"/>
    <param name="ground_truth_odometry_rosbag_topic"
           value="$(arg gt_topic)"                   unless="$(arg online)"/>
    <param name="external_odometry_rosbag_topic"
           value="$(arg external_odom_topic)"
           unless="$(arg online)"/>
    <param name="log_gt_data"            value="$(arg log_gt_data)"/>

    <!-- Other subscription topics -->
    <remap from="reinit_flag" to="reinit_flag"/>
    <remap from="reinit_pose" to="reinit_pose"/>

    <!-- Remap publisher topics -->
    <remap from="odometry"                       to="odometry"/>
    <remap from="resiliency"                     to="resiliency"/>
    <remap from="imu_bias"                       to="imu_bias"/>
    <remap from="optimized_trajectory"           to="optimized_trajectory"/>
    <remap from="pose_graph"                     to="pose_graph"/>
    <remap from="mesh"                           to="mesh"/>
    <remap from="frontend_stats"                 to="frontend_stats"/>
    <remap from="debug_mesh_img/image_raw"       to="debug_mesh_img/image_raw"/>
    <remap from="feature_tracks/image_raw"       to="feature_tracks/image_raw"/>
    <remap from="time_horizon_pointcloud"        to="time_horizon_pointcloud"/>

    <!-- Resiliency Thresholds: TODO(Sandro) document -->
    <param name="velocity_det_threshold"  value="0.1"/>
    <param name="position_det_threshold"  value="0.3"/>
    <param name="stereo_ransac_threshold" value="20"/>
    <param name="mono_ransac_threshold"   value="30"/>

    <!-- Visualize in Rviz or in OpenCV -->
    <param name="use_rviz"                value="$(arg use_rviz)"/>

    <!-- TODO(nathan) consider not linking directly to arg -->
    <!-- Enable external processes to ask for a registration between two frames -->
    <param name="use_lcd_registration_server" value="$(arg lcd_no_detection)"/>

    <!-- Load calibration -->
    <!-- <rosparam command="load" file="$(arg params_folder)/calibration.yaml"/> -->
  </node>

  <!-- Launch visualizer -->
  <include unless="$(arg multirobot)" file="$(find pose_graph_tools_ros)/launch/posegraph_view.launch" >
    <arg name="frame_id"      value="$(arg map_frame_id)" />
    <arg name="graph_topic"   value="pose_graph" />
    <arg name="ns"            value="kimera_vio_ros"/>
  </include>

</launch>
